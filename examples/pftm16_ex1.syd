constants
	n = 2;	# state dimension (must be defined under system)
	m = 1;	# input dimension (must be defined under system)
	s = 1;	# state transition cost (setting this value doesn't change the state transition cost, currently fixed at 1)
	a = 1;	# x1-location of interface between two regions
	p0 = [[a],[0]];  # point on the interface between Ra and Rb
	n1 = [[1],[0]];  # outward normal for region Ra
end constants

system
	# dynamics
	n = 2;
	m = 1;
	s = 1;
	A = [[2,-2],[1,0]];
	B = [[1],[1]];
	Q = [[1, 0], [0, 1]];
	R = [[1]];
	# initial and final states
	x0 = [[a/2.0],[0]];
	xf = [[0],[0]];
end system

regions   
	Ra = HalfSpace(p0, n1); # halfpsace has form {x |  n1'*(x-p0) <= 0}
	Rb = HalfSpace(p0,-n1); # halfspace has form {x | -n1'*(x-p0) <= 0}
	Rab = Ra & Rb;
	Rn = Workspace();       # represents R^n, should not trigger S-procedure
end regions

automaton
    n_nodes = 4;
	edges = [(0,1), (0,2),(1,3), (2,3)];
    accepting = [3];  # must be a subset of nodes
    initial   = [0];  # must be a subset of nodes
    nodes[0] <- Rn;
    nodes[1] <- Ra;
    nodes[2] <- Rb;
    nodes[3] <- Rn;
    edges[(0,1)] <- Ra;
    edges[(0,2)] <- Rb;
    edges[(1,3)] <- Rab;
    edges[(2,3)] <- Rab;
end automaton
