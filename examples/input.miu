# optional
constants # kind of like #define's, should be doubles
    a = 1*(6 + 5);
    z = 5;
    p = [[1,2],[z*9,7]];
    normal = [[z + a], [z+a]];
    p1 = [[1],[2]];
end constants

system
    n = 2;
    m = 1;
    B = [[1],[2]];
    A = p;
    Q = [1];
    R = [[1]];
    x0 = [[1],[2]];
    xf = [[2],[5]];
    # should check for dimensions
end system

regions
    H = Ellipsoid([[1,0],[0,1]],p1);#HalfSpace(p1,normal);
    B = Ellipsoid([[1,0],[0,1]],p1);
    c = HalfSpace(p1,normal) & Workspace();
    R1 = B & H | c;
    R2 = B & H | c;
    R3 = B & H | c;
    R4 = B & H | Workspace();
    R5 = H & R2 & c;
end regions

automaton
    n_nodes = 4;
    edges = [(0,1),(1,3),(0,2),(2,3)]; # these are directed edges, can also have self-edges
    accepting = [3]; # must be a subset of nodes
    initial = [0];  # must be a subset of nodes
    nodes[0] <- R1;  # should be in canonical form (user's problem)
    nodes[1] <- R2;
    nodes[2] <- R3;
    nodes[3] <- R3;
    edges[(0,1)] <- R4;
end automaton

# if not automaton, then all stuff below

ap # bind regions to atomic propositions
	# this section specifies the regions (AP = {a, b, c})
    a <- B;
    b <- R5;
	c <- R5; 
end ap

letters # gives names to elements of 2^(AP)
   # e <- [];
    # atomic props = {a, b, c}
	# alphabet = {{}, {a}, {b}, {c}, {a, b}, {a, c}, {b, c}, {a, b, c}}
	#               !a <=> {b, c}
	#               b & c <=> {b, c}
	#               a & !c <=> not allowed
	# here we can have at most 8 definitions
    A = {a};
    B = {a,b}; # a subset of AP, or equivalently an element of 2^AP
    Q = {};
    C = {b};
    D = {a};
end letters

specifications
	#are RE over 2^(AP), where each letter is either a name (sigma1) or a subset of AP (element of 2^AP)
    phi1 = RE(ABC);
    #phi2 = RE(A*B*CB*CB*BBCC*CA);
    #phh = RE();
    #phi3 = RE(B);
    #phi4 = RE(A);
    #phi5 = RE(*);
end specifications
